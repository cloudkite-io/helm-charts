kube-prometheus-stack:
  grafana:
    enabled: false
  defaultRules:
    create: false
  alertmanager:
    enabled: false
    config:
      route:
        group_by: ['alertname', 'cluster', 'service', 'job']
    templateFiles:
      default_template.tmpl: |-
        {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}

        {{ define "msteams.ck.text" }}
        {{- $root := . -}}
        {{ range .Alerts -}}
        *Severity:* `{{ .Labels.severity }}`

        *Description:* {{ .Annotations.description }}

        {{ with .Annotations.query }}
        *Query:* {{ . }}
        {{- end }}
        {{ end }}
        {{ end }}

        {{ define "msteams.ck.title" }}
        [{{ .Status | toUpper }}] {{ .CommonLabels.alertname }}
        {{ end }}

  prometheus:
    prometheusSpec:
      resources:
        requests:
          memory: 1Gi
        limits:
          memory: 1Gi
      remoteWrite:
        - url: https://mimir-CLIENT_NAME.prod.cloudkite.io/api/v1/push
          basicAuth:
            username:
              name: basic-auth-creds
              key: username
            password:
              name: basic-auth-creds
              key: password
          headers:
            X-Scope-OrgID: CLIENT_NAME
          writeRelabelConfigs:
            - sourceLabels:
              - "__name__"
              regex: "kubernetes_build_info|version_checker_is_latest_version|kube_pod_.*|kube_node_.*|x509_.*|velero_backup.*"
              action: "keep"
          queueConfig:
            capacity: 5000
            maxSamplesPerSend: 1000
            maxShards: 100
      externalLabels:
        cluster: CLUSTER_NAME
      image:
          registry: quay.io
          repository: prometheus/prometheus
          tag: v2.45.0
  prometheusOperator:
    verticalPodAutoscaler:
      enabled: true

# basic_auth:
#   username: USERNAME
#   password: PASSWORD

version-checker:
  replicaCount: 1
  additionalAnnotations: {}
  additionalLabels: {}
  acr:
    username:
    password:
    refreshToken:
  docker:
    username:
    password:
    token:
  ecr:
    accessKeyID:
    secretAccessKey:
    sessionToken:
    iamRoleArn:
  quay:
    token:
  gcr:
    token:
  env: {}
  selfhosted: []
  resources: {}
  versionChecker:
    logLevel: info
    metricsServingAddress: 0.0.0.0:8080
    testAllContainers: true
    imageCacheTimeout: 30m
  service:
    annotations: {}
    labels: {}
    port: 8080
  serviceMonitor:
    enabled: true
    additionalLabels:
      release: "monitoring"

x509-certificate-exporter:
  prometheusServiceMonitor:
    create: true
    extraLabels:
      release: "monitoring"
  prometheusRules:
    create: false
      
vpaApps:
  enabled: true
  configs:
    prometheus:
      kind: StatefulSet
    kube-state-metrics:
      kind: Deployment
    prometheus-node-exporter:
      kind: DaemonSet
      minReplicas: 2